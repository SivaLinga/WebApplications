package com.crmindz.controller;

import java.util.List;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.crmindz.model.Login;
import com.crmindz.model.Ticket;
import com.crmindz.model.User;
import com.crmindz.service.RegistrationService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@Controller
public class MainController {
	@Autowired
	RegistrationService registrationService;

	@RequestMapping(value = "/home")
	public String welcomePage(Model model) {
		return "home";
	}

	@RequestMapping(value = "/signup", method = RequestMethod.POST)
	public String register(User user, Model model) {
		// registrationService.validateRegistration(user);
		System.out.println(user);
		if (registrationService.register(user)) {
			return "registrationsuccess";
		}

		else
			return "registrationerror";
	}

	/*
	 * @RequestMapping(value="/login", method=RequestMethod.POST) public String
	 * login(Login login, ModelMap model, HttpSession session) {
	 * //System.out.println("Got the Login Details From the Front End");
	 * //System.out.println(login); String validateStatus =
	 * registrationService.validateLogin(login);
	 * 
	 * if(validateStatus.equals("Invalid UserName") ||
	 * validateStatus.equals("InCorrect Password") ) { model.put("error",
	 * "Email or Password is Incorrect!!"); return "loginerror"; } else { String
	 * sessionID = session.getId(); System.out.println(sessionID);
	 * session.setAttribute("sname",login.getEmail());
	 * 
	 * if(validateStatus.equals("student")) { return "studentloginsuccess"; } else
	 * if(validateStatus.equals("consultant")) { return "consultantloginsuccess"; }
	 * else { return "employeeloginsuccess"; } } }
	 */

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(Login login, ModelMap model, HttpSession session) {
		// System.out.println("Got the Login Details From the Front End");
		// System.out.println(login);
		List<Login> loginDetailsFromDb = registrationService.validateLogin(login);
		model.put("error", "Email or Password is Incorrect!!");
		if (loginDetailsFromDb.isEmpty()) {
			return "loginerror";
		} else if (loginDetailsFromDb.get(0).getPassword().equals(login.getPassword())) {
			String sessionID = session.getId();
			System.out.println(sessionID);
			session.setAttribute("sloginID", loginDetailsFromDb.get(0).getLoginId());
			String userType = loginDetailsFromDb.get(0).getUserType();
			if ("student".equals(userType)) {
				return "studentloginsuccess";
			} else if ("consultant".equals(userType)) {
				return "consultantloginsuccess";
			} else {
				return "employeeloginsuccess";
			}

		} else {
			return "loginerror";
		}
	}

	

	@RequestMapping(value = "/display")
	@ResponseBody
	public String retrieveTickets(Ticket ticket, ModelMap model, HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		ticket.setSessionAttribute(sessionAttribute);
		List<Ticket> listOfTickets = registrationService.displayTicketData(ticket);
		System.out.println(listOfTickets);
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(listOfTickets);
		// jsonArray = "{\"page\":1,\"total\":\"4\",\"records\":" + listOfTickets.size()
		// + ",\"rows\":" + jsonArray + "}";
		return jsonArray;
	}

	@RequestMapping(value="/ticket", method = RequestMethod.GET)
	public String displayTickets(HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		System.out.println(sessionAttribute);
		if (sessionAttribute != null) {
			return "ticket";
		}

		else {
			System.out.println("Please Login First!!!");
			return "home";
		}

	}

	@RequestMapping(value = "/addTicket",method = RequestMethod.POST)
	public String addTikcet(Ticket ticket, Model model, HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		//System.out.println(ticket);
		if (sessionAttribute != null) {
			ticket.setSessionAttribute(sessionAttribute);
			ticket.setTstatus("pending");
			String ticketNumber = registrationService.generateTicketNumber();
			ticket.setTicketNumber(ticketNumber);
			if (registrationService.addTicket(ticket)) {
				return "ticket";
			} else {
				System.out.println("Problem in adding Ticket");
				return "home";
			}
		} else {
			System.out.println("Please Login First");
			return "home";
		}
	}

	@RequestMapping(value="/showTickets")
	public String displayAllTickets(HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		System.out.println(sessionAttribute);
		if (sessionAttribute != null) {
			return "employeeticket";
		}

		else {
			System.out.println("Please Login First!!!");
			return "home";
		}

	}

	@RequestMapping(value = "/displayPending")
	@ResponseBody
	public String retrievePendingTickets(Ticket ticket, ModelMap model, HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		ticket.setSessionAttribute(sessionAttribute);
		List<Ticket> pendingTickets = registrationService.displayPending();
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(pendingTickets);
		return jsonArray;
	}

	@RequestMapping(value = "/displayApproved")
	@ResponseBody
	public String retrieveApprovedTickets(Ticket ticket, ModelMap model, HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		ticket.setSessionAttribute(sessionAttribute);
		List<Ticket> approvedTickets = registrationService.displayApproved();
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(approvedTickets);
		return jsonArray;
	}

	@RequestMapping(value = "/displayRejected")
	@ResponseBody
	public String retrieveRejectedTickets(Ticket ticket, ModelMap model, HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		ticket.setSessionAttribute(sessionAttribute);
		List<Ticket> rejectedTickets = registrationService.displayRejected();
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String jsonArray = gson.toJson(rejectedTickets);
		return jsonArray;
	}

	@RequestMapping(value= "/approveTicket",method = RequestMethod.POST)
	public String approveTicket(Ticket ticket, Model model, HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		if (sessionAttribute != null) {
			ticket.setSessionAttribute(sessionAttribute);
			ticket.setTstatus("approved");
			if (registrationService.approveTicket(ticket)) {
				return "employeeticket";
			} else {
				return "home";
			}
		} else {
			return "home";
		}
	}

	@RequestMapping(value="/rejectTicket",method = RequestMethod.POST)
	public String rejectTicket(Ticket ticket, Model model, HttpSession session) {
		String sessionAttribute = (String) session.getAttribute("sloginID");
		System.out.println(ticket);
		if (sessionAttribute != null) {
			ticket.setSessionAttribute(sessionAttribute);
			ticket.setTstatus("rejected");
			if (registrationService.rejectTicket(ticket)) {
				return "employeeticket";
			} else {
				return "home";
			}
		} else {
			return "home";
		}
	}
	
	@RequestMapping(value = "logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		session.invalidate();
		return "home";
	}

	@RequestMapping(value = "/getState", method = RequestMethod.GET)
	@ResponseBody
	public String getStates() {
		String listOfStates = registrationService.getStates();
		return listOfStates;
	}

	@RequestMapping(value = "/getCategories", method = RequestMethod.GET)
	@ResponseBody
	public String getCategories() {
		String categoryData = registrationService.getCategories();
		return categoryData;
	}

	@RequestMapping(value = "/getSubCategories", method = RequestMethod.GET)
	@ResponseBody
	public String getSubCategories(String categoryValue) {
		String subCategoriesData = registrationService.getSubCategories(categoryValue);
		return subCategoriesData;
	}

}
